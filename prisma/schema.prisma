generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// ENUMS
// ==========================
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  READY_FOR_PICKUP
  PAID
  CANCELLED
}

// ==========================
// MODELS
// ==========================
model User {
  id                     String      @id @default(cuid())
  clerkId                String      @unique
  firstName              String?
  lastName               String?
  email                  String?     @unique
  role                   UserRole    @default(BUYER)
  imageUrl               String?
  phone                  String?
  location               String?
  hasCompletedOnboarding Boolean     @default(false)
  createdAt              DateTime    @default(now())

  // Relations
  products               Product[]   @relation("UserProducts")
  orders                 Order[]     @relation("UserOrders")
  cart                   Cart?
  comments               Comment[]   @relation("UserComments")
  ratings                Rating[]    @relation("UserRatings")
}

// ==========================
// PRODUCTS (Fashion Items)
// ==========================
model Product {
  id           String         @id @default(cuid())
  name         String
  description  String?
  price        Float
  category     String?
  brand        String?
  color        String?
  size         String?
  material     String?
  stock        Int            @default(0)
  createdAt    DateTime       @default(now())

  // Relations
  seller       User?          @relation("UserProducts", fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId     String?
  orderItems   OrderItem[]
  images       ProductImage[] @relation("ProductImages")
  cartItems    CartItem[]
  comments     Comment[]      @relation("ProductComments")
  ratings      Rating[]       @relation("ProductRatings")
}

// ==========================
// RATINGS
// ==========================
model Rating {
  id         String    @id @default(cuid())

  createdAt  DateTime  @default(now())
  rating     Int?      // Optional rating (1-5)
  numberOfRaters  Int       @default(0)
  // Relations
  user       User?     @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   // optional to allow existing rows
  product    Product?  @relation("ProductRatings", fields: [productId], references: [id], onDelete: Cascade)
  productId  String?   // optional to allow existing rows

  @@unique([userId, productId]) // ensures one rating per user per product
}

// ==========================
// COMMENTS
// ==========================
model Comment {
  id         String    @id @default(cuid())
  content    String

  createdAt  DateTime  @default(now())

  // Relations
  user       User?     @relation("UserComments", fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  product    Product?  @relation("ProductComments", fields: [productId], references: [id], onDelete: Cascade)
  productId  String?
}

// ==========================
// PRODUCT IMAGES
// ==========================
model ProductImage {
  id         String    @id @default(cuid())
  imageUrl   String
  product    Product?  @relation("ProductImages", fields: [productId], references: [id], onDelete: SetNull)
  productId  String?
  createdAt  DateTime  @default(now())
}

// ==========================
// ORDERS
// ==========================
model Order {
  id               String           @id @default(cuid())
  buyer            User?            @relation("UserOrders", fields: [buyerId], references: [id], onDelete: SetNull)
  buyerId          String?
  totalAmount      Float
  status           OrderStatus      @default(PENDING)
  pickupLocation   PickupLocation?  @relation(fields: [pickupLocationId], references: [id], onDelete: SetNull)
  pickupLocationId String?
  createdAt        DateTime         @default(now())

  // Relations
  items            OrderItem[]
}

// ==========================
// ORDER ITEMS
// ==========================
model OrderItem {
  id        String   @id @default(cuid())
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  quantity  Int
  price     Float
}

// ==========================
// CART MODELS
// ==========================
model Cart {
  id        String      @id @default(cuid())
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?     @unique
  createdAt DateTime    @default(now())

  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: SetNull)
  cartId    String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  quantity  Int      @default(1)
}

// ==========================
// PICKUP LOCATIONS
// ==========================
model PickupLocation {
  id       String   @id @default(cuid())
  name     String
  address  String
  city     String
  contact  String?
  orders   Order[]
}
